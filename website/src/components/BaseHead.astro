---
export interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = '/favicon.svg' } = Astro.props;

const websiteId = import.meta.env.PUBLIC_UMAMI_WEBSITE_ID;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Analytics Integration -->
{websiteId && <script is:inline defer src="/umami.js" data-website-id={websiteId} />}
{websiteId && (
  <script is:inline>
    // Analytics tracking functionality
    (function() {
      /**
       * Initialize click tracking for elements with data-track attribute
       * and automatically track CTA buttons and external links
       */
      function initClickTracking() {
        // Track elements with explicit data-track attribute
        const trackableElements = document.querySelectorAll('[data-track]');

        trackableElements.forEach(element => {
          element.addEventListener('click', function () {
            const trackingName = this.getAttribute('data-track');
            if (window.umami && trackingName) {
              window.umami.track('click', { element: trackingName });
            }
          });
        });

        // Track all CTA buttons and external links
        const ctaButtons = document.querySelectorAll('button, [role="button"], .cta, .btn');
        const externalLinks = document.querySelectorAll(
          `a[href^="http"]:not([href*="${window.location.hostname}"])`
        );

        ctaButtons.forEach(button => {
          if (!button.hasAttribute('data-track')) {
            button.addEventListener('click', function () {
              const buttonText = this.textContent?.trim() || this.getAttribute('aria-label') || 'button';
              if (window.umami) {
                window.umami.track('cta-click', { button: buttonText });
              }
            });
          }
        });

        externalLinks.forEach(link => {
          if (!link.hasAttribute('data-track')) {
            link.addEventListener('click', function () {
              const href = this.getAttribute('href');
              const linkText = this.textContent?.trim() || href || 'external-link';
              if (window.umami && href) {
                window.umami.track('external-link', { url: href, text: linkText });
              }
            });
          }
        });
      }

      /**
       * Initialize scroll tracking with intersection observer for elements with data-track-view attribute
       * Only tracks once per page load and ignores elements in first viewport
       */
      function initScrollTracking() {
        const trackedSections = new Set();
        const trackableSections = document.querySelectorAll('[data-track-view]');

        if (trackableSections.length === 0) return;

        const observer = new IntersectionObserver(
          entries => {
            entries.forEach(entry => {
              if (entry.isIntersecting && entry.intersectionRatio >= 0.5) {
                const sectionName = entry.target.getAttribute('data-track-view');

                if (sectionName && !trackedSections.has(sectionName)) {
                  // Check if element is not in the first viewport
                  const rect = entry.target.getBoundingClientRect();
                  const isInFirstViewport = rect.top < window.innerHeight && rect.top >= 0;

                  if (!isInFirstViewport || window.pageYOffset > 0) {
                    trackedSections.add(sectionName);
                    if (window.umami) {
                      window.umami.track('section-view', { section: sectionName });
                    }
                  }
                }
              }
            });
          },
          {
            threshold: 0.5,
            rootMargin: '0px 0px -20% 0px',
          }
        );

        trackableSections.forEach(section => {
          observer.observe(section);
        });
      }

      /**
       * Initialize all analytics tracking when DOM is loaded
       */
      function initAnalytics() {
        initClickTracking();
        initScrollTracking();
      }

      // Initialize analytics when DOM is loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initAnalytics);
      } else {
        initAnalytics();
      }
    })();
  </script>
)}
